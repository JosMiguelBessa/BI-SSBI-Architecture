::Definir a fonte específica dos eventos a serem processados pelo logstash
input
{
	::Neste caso, o input de dados é feito através de um ficheiro de texto (.txt)
	file
	{
		::Caminho para o ficheiro a processar
		path => "/opt/logstash/bin/dhcp_logs/dhcp_1.txt"
		::Definir o tipo de dados dos eventos processados no ficheiro de input
		type => "dhcplogs"
		::Definir por onde começa a leitura do ficheiro (do início ou do fim)
		start_position => "beginning"
		::Verifica se o ficheiro de input já foi processado. Ao definir ignore_older => 0 se o ficheiro já tiver sido processado, não é processado novamente
		ignore_older => 0
		::Caminho para o ficheiro que faz o tracking dos eventos que já foram processados do ficheiro de input
		sincedb_path => "/opt/logstash/bin/indexes_since_db_track/producaodhcp"
	}
}
::Bloco relativo à filtragem dos eventos presentes no ficheiro de input
filter
{
	::grok é uma pattern que permite modular eventos do ficheiro de input (ideal para eventos provenientes de syslog, apache, mysql, webservers)
	grok	  
	{
		::Em cada iteração o campo message é populado pelos eventos do ficheiro de input	
		::match é utilizado para identificar os diferentes campos que constituem os eventos do ficheiro de input (presentes no campo message)
		::Este primeiro grok é utilizado para identificar o tipo de evento dhcp, uma vez que cada tipo possui um número de campos diferentes
		match => ["message", "(dhcpd\S+\s*(%{WORD:dhcp_action_test}))"]
	}
	
	::Caso o evento do ficheiro de input seja do tipo DHCPINFORM
	if "DHCPINFORM" in [message]
	{
		grok
		{
			match => ["message","((%{SYSLOGTIMESTAMP:datelog})\s*(%{HOSTNAME:hostname})\s*dhcpd\S+\s*(%{WORD:dhcp_action})?.*[from] (%{IPV4:dhcp_client_ip})?.*via (%{USERNAME:interface}))"]
		}
		::Mutate permite fazer alterações a variáveis (criar novos campos, apagar campos, mudar tipo de dados de campos)
		mutate
		{
			::add_field é utilizado para criar um novo campo
			::Neste caso, como os eventos do ficheiro de input eram provenientes de um Syslog, a data dos eventos não possui o ano, pelo que será adicionado com este campo
			add_field => ["year_log", "2014"]
		}

		mutate
		{
			add_field => ["created_datalog", "%{year_log} %{datelog}"]
		}
		
		::date é utilizado para definir campos do tipo data
		date
		{
			::Atribuir um formato de data ao campo com os dados referentes à data dos eventos do ficheiro de input
			match => ["created_datalog", "YYYY MMM dd HH:mm:ss", "YYYY MMM d HH:mm:ss"]
			::Definir a variável do tipo data que será usada no futuro para filtrar eventos num espaço temporal
			target => "@created_datalog"
			::Definir timezone da data dos eventos do ficheiro de input
			timezone => "UTC"
		}

		date
		{
			match => ["created_datalog", "YYYY MMM dd HH:mm:ss", "YYYY MMM d HH:mm:ss"]
			target => "@timestamp"
			timezone => "UTC"
		}
	}
	::Caso o evento do ficheiro de input seja do tipo DHCPDISCOVER
	else if "DHCPDISCOVER" in [message]
	{
		grok
		{
			match => ["message","((%{SYSLOGTIMESTAMP:datelog})\s*(%{HOSTNAME:hostname})\s*dhcpd\S+\s*(%{WORD:dhcp_action})?.*[from] (%{COMMONMAC:dhcp_client_mac})?.*via (%{USERNAME:interface}))"]
		}
		
		mutate
		{
			add_field => ["year_log", "2014"]
		}

		mutate
		{
			add_field => ["created_datalog", "%{year_log} %{datelog}"]
		}

		date
		{
			match => ["created_datalog", "YYYY MMM dd HH:mm:ss", "YYYY MMM d HH:mm:ss"]
			target => "@created_datalog"
			timezone => "UTC"
		}

		date
		{
			match => ["created_datalog", "YYYY MMM dd HH:mm:ss", "YYYY MMM d HH:mm:ss"]
			target => "@timestamp"
			timezone => "UTC"
		}
	}
	::Caso o evento do ficheiro de input seja do tipo DHCPPACK to
	else if "DHCPACK to" in [message]
	{
		grok
		{
			match => ["message","((%{SYSLOGTIMESTAMP:datelog})\s*(%{HOSTNAME:hostname})\s*dhcpd\S+\s*(%{WORD:dhcp_action})?.*[to] (%{IPV4:dhcp_client_ip})?.*via (%{USERNAME:interface}))"]                
		}
		
		mutate
		{
			add_field => ["year_log", "2014"]
		}

		mutate
		{
			add_field => ["created_datalog", "%{year_log} %{datelog}"]
		}

		date
		{
			match => ["created_datalog", "YYYY MMM dd HH:mm:ss", "YYYY MMM d HH:mm:ss"]
			target => "@created_datalog"
			timezone => "UTC"
		}

		date
		{
			match => ["created_datalog", "YYYY MMM dd HH:mm:ss", "YYYY MMM d HH:mm:ss"]
			target => "@timestamp"
			timezone => "UTC"
		}
	}
	::Caso o evento do ficheiro de input seja do tipo DHCPINFORM on
	else if "DHCPACK on" in [message]
	{
		grok
		{
			match => ["message","((%{SYSLOGTIMESTAMP:datelog})\s*(%{HOSTNAME:hostname})\s*dhcpd\S+\s*(%{WORD:dhcp_action})?.*[for|on] (%{IPV4:dhcp_client_ip})?.*[from|to] (%{COMMONMAC:dhcp_client_mac})?.*via (%{USERNAME:interface}))"]                
		}
		
		mutate
		{
			add_field => ["year_log", "2014"]
		}

		mutate
		{
			add_field => ["created_datalog", "%{year_log} %{datelog}"]
		}

		date
		{
			match => ["created_datalog", "YYYY MMM dd HH:mm:ss", "YYYY MMM d HH:mm:ss"]
			target => "@created_datalog"
			timezone => "UTC"
		}

		date
		{
			match => ["created_datalog", "YYYY MMM dd HH:mm:ss", "YYYY MMM d HH:mm:ss"]
			target => "@timestamp"
			timezone => "UTC"
		}
	}
	::Caso o evento do ficheiro de input seja do tipo DHCPOFFER
	else if "DHCPOFFER" in [message]
	{
		grok
		{
			match => ["message","((%{SYSLOGTIMESTAMP:datelog})\s*(%{HOSTNAME:hostname})\s*dhcpd\S+\s*(%{WORD:dhcp_action})?.*[for|on] (%{IPV4:dhcp_client_ip})?.*[from|to] (%{COMMONMAC:dhcp_client_mac})?.*via (%{USERNAME:interface}))"]
		}
		
		mutate
		{
			add_field => ["year_log", "2014"]
		}

		mutate
		{
			add_field => ["created_datalog", "%{year_log} %{datelog}"]
		}

		date
		{
			match => ["created_datalog", "YYYY MMM dd HH:mm:ss", "YYYY MMM d HH:mm:ss"]
			target => "@created_datalog"
			timezone => "UTC"
		}

		date
		{
			match => ["created_datalog", "YYYY MMM dd HH:mm:ss", "YYYY MMM d HH:mm:ss"]
			target => "@timestamp"
			timezone => "UTC"
		}
	}
	::Caso o evento do ficheiro de input seja do tipo DHCPREQUEST
	else if "DHCPREQUEST" in [message]
	{
		grok
		{
			match => ["message","((%{SYSLOGTIMESTAMP:datelog})\s*(%{HOSTNAME:hostname})\s*dhcpd\S+\s*(%{WORD:dhcp_action})?.*[for|on] (%{IPV4:dhcp_client_ip})?.*[from|to] (%{COMMONMAC:dhcp_client_mac})?.*via (%{USERNAME:interface}))"]                
		}
		
		mutate
		{
			add_field => ["year_log", "2014"]
		}

		mutate
		{
			add_field => ["created_datalog", "%{year_log} %{datelog}"]
		}

		date
		{
			match => ["created_datalog", "YYYY MMM dd HH:mm:ss", "YYYY MMM d HH:mm:ss"]
			target => "@created_datalog"
			timezone => "UTC"
		}

		date
		{
			match => ["created_datalog", "YYYY MMM dd HH:mm:ss", "YYYY MMM d HH:mm:ss"]
			target => "@timestamp"
			timezone => "UTC"
		}
	}
	::Caso o evento do ficheiro de input seja do tipo DHCPRELEASE
	else if "DHCPRELEASE" in [message]
	{
		grok
		{
			match => ["message","((%{SYSLOGTIMESTAMP:datelog})\s*(%{HOSTNAME:hostname})\s*dhcpd\S+\s*(%{WORD:dhcp_action})?.*[for|on] (%{IPV4:dhcp_client_ip})?.*[from|to] (%{COMMONMAC:dhcp_client_mac})?.*via (%{USERNAME:interface}))"]                
		}
		
		mutate
		{
			add_field => ["year_log", "2014"]
		}

		mutate
		{
			add_field => ["created_datalog", "%{year_log} %{datelog}"]
		}

		date
		{
			match => ["created_datalog", "YYYY MMM dd HH:mm:ss", "YYYY MMM d HH:mm:ss"]
			target => "@created_datalog"
			timezone => "UTC"
		}

		date
		{
			match => ["created_datalog", "YYYY MMM dd HH:mm:ss", "YYYY MMM d HH:mm:ss"]
			target => "@timestamp"
			timezone => "UTC"
		}
	}
	::Caso o evento do ficheiro de input seja do tipo DHCPDECLINE
	else if "DHCPDECLINE" in [message]
	{
		grok
		{
			match => ["message","((%{SYSLOGTIMESTAMP:datelog})\s*(%{HOSTNAME:hostname})\s*dhcpd\S+\s*(%{WORD:dhcp_action})?.*[for|on] (%{IPV4:dhcp_client_ip})?.*[from|to] (%{COMMONMAC:dhcp_client_mac})?.*via (%{USERNAME:interface}))"]
		}
		
		mutate
		{
			add_field => ["year_log", "2014"]
		}

		mutate
		{
			add_field => ["created_datalog", "%{year_log} %{datelog}"]
		}

		date
		{
			match => ["created_datalog", "YYYY MMM dd HH:mm:ss", "YYYY MMM d HH:mm:ss"]
			target => "@created_datalog"
			timezone => "UTC"
		}

		date
		{
			match => ["created_datalog", "YYYY MMM dd HH:mm:ss", "YYYY MMM d HH:mm:ss"]
			target => "@timestamp"
			timezone => "UTC"
		}
	}
	::Todos os ficheiros que serão processados foram populados no final com a palavra END 
	::Assim que seja encontrado um evento apenas com a palavra END, termina o processamento
	else if "END" in [message]
	{
		mutate
		{
			add_tag => ["end"]
			remove_tag => ["_grokparsefailure"]
		}
	}
	::Caso o evento do ficheiro de input seja de outro tipo que não os identificados para os tipos de mensagem DHCP
	else
	{
		mutate
		{
			add_tag => ["_grokparsefailure"]
		}
	}
}
::Definir o destino para onde será enviado o resultado do processamento dos eventos (documento) 
::presentes no ficheiro de input (Parte final da pipeline dos eventos)
output
{
	::Caso exista a tag "end" 
	if "end" in [tags]
	{
		::exec para executar um bash script
		::Neste caso o bash script irá avisar na linha de comandos quando o processamento de eventos estiver concluído
		exec
		{
			::dentro do exec é utilizado o command que leva como parametro uma string. Para que o ficheiro seja executado, devera ser colocado o tipo do ficheiro
			::a executar antes do caminho do ficheiro 
			command => "sh /opt/logstash/bin/stop_filter.sh"
		}
	}
	::Caso exista a tag "_grokparsefailure"
	else if "_grokparsefailure" in [tags]
	{
		::O destino do documento será uma base de dados Elasticsearch
		elasticsearch
		{
			::Utilizado para especificar a ação a tomar sobre a base de dados Elasticsearch 
			::Neste caso será feita uma indexação de documentos
			action => "index"
			::Utilizado para especificar o host/hosts onde se encontra a base de dados onde será armazenado o documento
			hosts => "localhost"
			::Utilizado para especificar a base de dados onde o documento será indexado
			index => "dhcperror"
		}
	}
	
	else
	{
		elasticsearch
		{
			action => "index"
			hosts => "localhost"
			index => "dhcp-%{+MM.YYYY}"
			::Permite especificar o caminho para o ficheiro onde é definido um template para os campos do documento a indexar 
			::(definir tipos de dados, se são analizados antes de indexar,...)
			template => ["/opt/logstash/bin/dhcptemplate.json"]
			::Utilizado para validar um template customizado para o documento a indexar
			manage_template => true
			::Permite especificar que o template definido anteriormente será sobreposto a qualquer outro
			template_overwrite => true
		}
	}
	
	::Utilizado para imprimir na consola o processamento dos eventos do ficheiro de input, para que o utilizador possa fazer
	::o acompanhamento visual da execução do processo
	stdout
	{
		codec => rubydebug
	}
}
